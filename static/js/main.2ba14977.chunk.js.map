{"version":3,"sources":["assets/images/fog.png","assets/images/sunny.png","assets/images/cloudy.png","assets/images/rainy.png","assets/images/snowy.png","components/FetchData.js","components/CurrentCard.js","components/ForecastDetails.js","components/WeatherApp.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","useFetchData","api_key","forecastType","lastSearchedLocation","setCurrentWeather","setForecast","setError","fetchWeatherData","useCallback","async","location","lat","lon","_ref","currentWeatherUrl","concat","forecastUrl","currentWeatherRes","fetch","currentWeatherData","json","ok","forecastRes","forecastData","today","Date","tomorrow","filteredForecast","setDate","getDate","setHours","list","filter","item","itemDate","dt_txt","getHours","slice","error","console","useEffect","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","CurrentCard","currentWeather","handleInputChange","handleKeyDown","search","handleForecastTypeChange","weatherImages","Clear","sunny","Clouds","cloudy","Rain","rainy","Snow","snowy","Mist","fog","Haze","Fog","weatherImage","weather","main","currentDate","dayOfWeek","getDay","month","getMonth","dayOfMonth","formattedDate","React","createElement","className","name","type","placeholder","value","onChange","onKeyDown","onClick","checked","Math","floor","temp","Fragment","temp_min","temp_max","src","alt","humidity","wind","speed","ForecastDetails","forecast","daysOfWeek","months","map","day","index","key","forecastItem","toLocaleString","weekday","hour","minute","hour12","WeatherApp","useState","setLocation","setLastSearchedLocation","setForecastType","trim","e","target","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2ba14977.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fog.2118a0dd.png\";","module.exports = __webpack_public_path__ + \"static/media/sunny.ff33f0de.png\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.a1cb48a6.png\";","module.exports = __webpack_public_path__ + \"static/media/rainy.7d524058.png\";","module.exports = __webpack_public_path__ + \"static/media/snowy.dc885783.png\";","import { useEffect, useCallback } from \"react\";\r\n\r\nconst useFetchData = (api_key, forecastType, lastSearchedLocation, setCurrentWeather, setForecast, setError) => {\r\n  const fetchWeatherData = useCallback(async ({ location, lat, lon }) => {\r\n    try {\r\n      const currentWeatherUrl = location\r\n        ? `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${api_key}`\r\n        : `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${api_key}`;\r\n\r\n      const forecastUrl = location\r\n        ? `https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&appid=${api_key}`\r\n        : `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${api_key}`;\r\n\r\n      const currentWeatherRes = await fetch(currentWeatherUrl);\r\n      const currentWeatherData = await currentWeatherRes.json();\r\n\r\n      if (currentWeatherRes.ok) {\r\n        setCurrentWeather(currentWeatherData);\r\n\r\n        if (forecastType === \"forecast\" || forecastType === \"3hour\") {\r\n          const forecastRes = await fetch(forecastUrl);\r\n          const forecastData = await forecastRes.json();\r\n\r\n          const today = new Date();\r\n          const tomorrow = new Date(today);\r\n          tomorrow.setDate(today.getDate() + 1);\r\n          tomorrow.setHours(0, 0, 0, 0);\r\n\r\n          let filteredForecast;\r\n          if (forecastType === \"forecast\") {\r\n            filteredForecast = forecastData.list.filter((item) => {\r\n              const itemDate = new Date(item.dt_txt);\r\n              return itemDate >= tomorrow && itemDate.getHours() === 12;\r\n            });\r\n          } else if (forecastType === \"3hour\") {\r\n            filteredForecast = forecastData.list.filter((item) => {\r\n              const itemDate = new Date(item.dt_txt);\r\n              return itemDate >= tomorrow;\r\n            }).slice(0, 8);\r\n          }\r\n\r\n          setForecast(filteredForecast);\r\n        } else {\r\n          setForecast([]);\r\n        }\r\n\r\n        setError(null);\r\n      } else {\r\n        setError(\"Location not found. Please enter a valid city name.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching weather data:\", error);\r\n      setError(\"Error fetching weather data. Please try again later.\");\r\n    }\r\n  }, [api_key, forecastType, setCurrentWeather, setForecast, setError]);\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData({ location: lastSearchedLocation });\r\n  }, [fetchWeatherData, forecastType, lastSearchedLocation]);\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          fetchWeatherData({ lat: latitude, lon: longitude });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error fetching user's location:\", error);\r\n          fetchWeatherData({ location: lastSearchedLocation });\r\n        }\r\n      );\r\n    } else {\r\n      fetchWeatherData({ location: lastSearchedLocation });\r\n    }\r\n  }, [fetchWeatherData, lastSearchedLocation]);\r\n\r\n  return { fetchWeatherData };\r\n};\r\n\r\nexport default useFetchData;","import React from \"react\";\r\nimport sunny from \"../assets/images/sunny.png\";\r\nimport cloudy from \"../assets/images/cloudy.png\";\r\nimport rainy from \"../assets/images/rainy.png\";\r\nimport snowy from \"../assets/images/snowy.png\";\r\nimport fog from \"../assets/images/fog.png\";\r\nimport \"./CurrentCard.css\";\r\n\r\nconst CurrentCard = ({ currentWeather, location, handleInputChange, handleKeyDown, search, forecastType, handleForecastTypeChange, error }) => {\r\n  const weatherImages = {\r\n    Clear: sunny,\r\n    Clouds: cloudy,\r\n    Rain: rainy,\r\n    Snow: snowy,\r\n    Mist: fog,\r\n    Haze: fog,\r\n    Fog: fog,\r\n  };\r\n\r\n  const weatherImage = currentWeather.weather ? weatherImages[currentWeather.weather[0].main] : null;\r\n\r\n  const currentDate = new Date();\r\n  const daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n  const dayOfWeek = daysOfWeek[currentDate.getDay()];\r\n  const month = months[currentDate.getMonth()];\r\n  const dayOfMonth = currentDate.getDate();\r\n\r\n  const formattedDate = `${dayOfWeek}, ${dayOfMonth} ${month}`;\r\n\r\n  return (\r\n    <div className=\"current-weather-card\">\r\n      <div className=\"search\">\r\n        <div className=\"search-top\">\r\n          <i className=\"fa-solid fa-location-dot\"></i>\r\n          <div className=\"location\">{currentWeather.name}</div>\r\n        </div>\r\n        <div className=\"search-bar\">\r\n          <input type=\"text\" placeholder=\"Enter Location\" value={location} onChange={handleInputChange} onKeyDown={handleKeyDown} />\r\n          <i className=\"fa-solid fa-magnifying-glass\" onClick={search}></i>\r\n        </div>\r\n      </div>\r\n      <div className=\"forecast-option\">\r\n        <label className=\"forecast-label\">\r\n          <input className=\"forecast-input\" type=\"radio\" value=\"current\" checked={forecastType === \"current\"} onChange={handleForecastTypeChange} />\r\n          Current Weather\r\n        </label>\r\n        <label className=\"forecast-label\">\r\n          <input className=\"forecast-input\" type=\"radio\" value=\"3hour\" checked={forecastType === \"3hour\"} onChange={handleForecastTypeChange} />\r\n          3-Hour Forecast\r\n        </label>\r\n        <label className=\"forecast-label\">\r\n          <input className=\"forecast-input\" type=\"radio\" value=\"forecast\" checked={forecastType === \"forecast\"} onChange={handleForecastTypeChange} />\r\n          5-Days Forecast\r\n        </label>\r\n      </div>\r\n      <div className=\"weather-date\">\r\n        <p>{formattedDate}</p>\r\n      </div>\r\n      <div className=\"weather\">\r\n        <div className=\"weather-wrap\">\r\n          <div className=\"temp\">{currentWeather.main ? `${Math.floor(currentWeather.main.temp)}°` : null}</div>\r\n          <div className=\"weather-type\">{currentWeather.weather ? currentWeather.weather[0].main : null}</div>\r\n          <div className=\"min-max-temp\">\r\n            {currentWeather.main ? (\r\n              <>\r\n                <span className=\"min-max-data\">Min: {Math.floor(currentWeather.main.temp_min)}°</span>\r\n                <span className=\"min-max-data\">Max: {Math.floor(currentWeather.main.temp_max)}°</span>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className=\"weather-wrap\">\r\n          <img src={weatherImage} alt={currentWeather.weather ? currentWeather.weather[0].main : \"Weather\"} />\r\n        </div>\r\n      </div>\r\n      <div className=\"weather-data\">\r\n        <div className=\"humidity\">\r\n          <div className=\"data-name\">Humidity</div>\r\n          <i className=\"fa-solid fa-droplet\"></i>\r\n          <div className=\"data\">{currentWeather.main ? currentWeather.main.humidity : null}%</div>\r\n        </div>\r\n        <div className=\"wind\">\r\n          <div className=\"data-name\">Wind</div>\r\n          <i className=\"fa-solid fa-wind\"></i>\r\n          <div className=\"data\">{currentWeather.wind ? currentWeather.wind.speed : null} km/h</div>\r\n        </div>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentCard;","import React from \"react\";\r\nimport sunny from \"../assets/images/sunny.png\";\r\nimport cloudy from \"../assets/images/cloudy.png\";\r\nimport rainy from \"../assets/images/rainy.png\";\r\nimport snowy from \"../assets/images/snowy.png\";\r\nimport fog from \"../assets/images/fog.png\";\r\nimport \"./ForecastDetails.css\";\r\n\r\nconst ForecastDetails = ({ forecast, forecastType }) => {\r\n  const weatherImages = {\r\n    Clear: sunny,\r\n    Clouds: cloudy,\r\n    Rain: rainy,\r\n    Snow: snowy,\r\n    Mist: fog,\r\n    Haze: fog,\r\n    Fog: fog,\r\n  };\r\n\r\n  const daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n  return (\r\n    <div className=\"forecast-container\">\r\n      {forecastType === \"forecast\" &&\r\n        forecast.map((day, index) => (\r\n          <div key={index} className=\"forecast-card\">\r\n            <div className=\"forecast-date forecast-item\">\r\n              {daysOfWeek[new Date(day.dt_txt).getDay()]}, {new Date(day.dt_txt).getDate()} {months[new Date(day.dt_txt).getMonth()]}\r\n            </div>\r\n            <img className=\"forecast-item\" src={weatherImages[day.weather[0].main]} alt={day.weather[0].main} />\r\n            <div className=\"forecast-temp forecast-item\">{Math.floor(day.main.temp)}°</div>\r\n            <div className=\"forecast-type forecast-item\">{day.weather[0].main}</div>\r\n          </div>\r\n        ))}\r\n      {forecastType === \"3hour\" &&\r\n        forecast.map((forecastItem, index) => (\r\n          <div key={index} className=\"forecast-card\">\r\n            <div className=\"forecast-date forecast-item\">\r\n              {new Date(forecastItem.dt_txt).toLocaleString(\"en-US\", {\r\n                weekday: \"short\",\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n                hour12: true,\r\n              })}\r\n            </div>\r\n            <img className=\"forecast-item\" src={weatherImages[forecastItem.weather[0].main]} alt={forecastItem.weather[0].main} />\r\n            <div className=\"forecast-temp forecast-item\">{Math.floor(forecastItem.main.temp)}°</div>\r\n            <div className=\"forecast-type forecast-item\">{forecastItem.weather[0].main}</div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastDetails;","import React, { useState } from \"react\";\r\nimport useFetchData from \"./FetchData\";\r\nimport CurrentCard from \"./CurrentCard\";\r\nimport ForecastDetails from \"./ForecastDetails\";\r\nimport \"./WeatherApp.css\";\r\n\r\nconst WeatherApp = () => {\r\n  const [currentWeather, setCurrentWeather] = useState({});\r\n  const [forecast, setForecast] = useState([]);\r\n  const [location, setLocation] = useState(\"\");\r\n  const [lastSearchedLocation, setLastSearchedLocation] = useState(\"Ivano-Frankivsk\");\r\n  const [forecastType, setForecastType] = useState(\"current\");\r\n  const [error, setError] = useState(null);\r\n  const api_key = \"122fd86f3d457dcb0cae2fe31309f5f5\";\r\n\r\n  const { fetchWeatherData } = useFetchData(api_key, forecastType, lastSearchedLocation, setCurrentWeather, setForecast, setError);\r\n\r\n  const handleInputChange = (e) => {\r\n    setLocation(e.target.value);\r\n  };\r\n\r\n  const handleForecastTypeChange = (e) => {\r\n    setForecastType(e.target.value);\r\n  };\r\n\r\n  const search = () => {\r\n    if (location.trim() !== \"\") {\r\n      fetchWeatherData({ location });\r\n      setLastSearchedLocation(location);\r\n      setLocation(\"\");\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      search();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <CurrentCard\r\n        currentWeather={currentWeather}\r\n        location={location}\r\n        handleInputChange={handleInputChange}\r\n        handleKeyDown={handleKeyDown}\r\n        search={search}\r\n        forecastType={forecastType}\r\n        handleForecastTypeChange={handleForecastTypeChange}\r\n        error={error}\r\n      />\r\n      <ForecastDetails forecast={forecast} forecastType={forecastType} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;","import React from 'react';\nimport './App.css';\nimport WeatherApp from './components/WeatherApp';\nimport './components/WeatherApp.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherApp/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}